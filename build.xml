<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<project basedir="." default="build" name="JadeTests" xmlns:jacoco="antlib:org.jacoco.ant">

	<property environment="env" />

	<property name="junit.output.dir" value="junit" />
	<property name="debuglevel" value="source,lines,vars" />
	<property name="target" value="1.8" />
	<property name="source" value="1.8" />

	<path id="Jacoco.libraryclasspath">
		<pathelement location="lib/jacocoant.jar" />
	</path>

	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath refid="Jacoco.libraryclasspath" />
	</taskdef>

	<path id="JUnit 4.libraryclasspath">
		<pathelement location="lib/junit.jar" />
		<pathelement location="lib/org.hamcrest.core_1.3.0.v201303031735.jar" />
	</path>

	<path id="JadeTests.classpath">
		<pathelement location="target/classes" />
		<pathelement location="target/test-classes" />
		<path refid="JUnit 4.libraryclasspath" />
		<pathelement location="lib/commons-codec-1.3.jar" />
		<pathelement location="lib/testSuite.jar" />
		<pathelement location="jade-4.4.0/lib/jade.jar" />
	</path>

	<target name="init">
		<mkdir dir="target/classes" />
		<mkdir dir="target/test-classes" />
		<copy includeemptydirs="false" todir="target/classes">
			<fileset dir="src">
				<include name="**/*.java" />
				<include name="**/*.xml" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<copy includeemptydirs="false" todir="target/test-classes">
			<fileset dir="test">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>
	<target name="clean" description="Cleans the test suite folder and jacoco execution files">
		<delete dir="target/classes" />
		<delete dir="target/test-classes" />
		<delete dir="." includes="*.exec">
		</delete>
	</target>

	<target name="clean-jade">
		<ant dir="jade-4.4.0" antfile="build.xml" target="clean"/>
	</target>

	<target depends="clean,clean-jade" name="cleanall" description="Cleans the test suite and the jade project" />
	
	<target depends="build-subprojects,build-project" name="build" description="Build all"/>

	<target name="build-subprojects">
		<echo message="Building jade.jar ...">
		</echo>
		<ant dir="jade-4.4.0" antfile="build.xml" target="lib">
		</ant>
	</target>

	<target depends="init" name="build-project">
		<echo message="${ant.project.name}: ${ant.file}" />
		<javac debug="true" debuglevel="${debuglevel}" destdir="target/classes" includeantruntime="false" source="${source}" target="${target}">
			<src path="src" />
			<include name="**/*.java" />
			<classpath refid="JadeTests.classpath" />
		</javac>
		<javac debug="true" debuglevel="${debuglevel}" destdir="target/test-classes" includeantruntime="false" source="${source}" target="${target}">
			<src path="test" />
			<classpath refid="JadeTests.classpath" />
		</javac>
	</target>

	<target name="test" description="Junit tests (3 test cases)">

		<mkdir dir="${junit.output.dir}" />
		<jacoco:coverage destfile="junit.exec" classdumpdir="target/jacoco-classes">
			<junit fork="yes" printsummary="withOutAndErr">
				<formatter type="xml" />
				<test name="jade.core.profile.JICP.JICPSPeerTest" todir="${junit.output.dir}" />
				<test name="jade.core.profile.JICP.MaskableJICPPeerTest" todir="${junit.output.dir}" />
				<test name="jade.imtp.leap.sms.PhoneBasedSMSManagerTest" todir="${junit.output.dir}" />
				<classpath refid="JadeTests.classpath" />
			</junit>
		</jacoco:coverage>
	</target>

	<target name="TestMain" description="Integration tests on various jade capabilities (13 tests). Press Ctrl^C after test execution.">
		<jacoco:coverage destfile="test1.exec">
			<java classname="gr.aueb.jade.test.TestMain" failonerror="true" fork="yes">
				<classpath refid="JadeTests.classpath" />
			</java>
		</jacoco:coverage>
	</target>

	<target name="TestMainNIO" description="Integration tests on SMSBEDispatcher (2 tests). Check the warning. Press Ctrl^C after test execution. ">
		<echo message="******************************************************** ${line.separator}" />
		<echo message="****************** WARNING !!! ************************* ${line.separator}" />
		<echo message="******************************************************** ${line.separator}" />
		<echo message="** Wait IOEventServer to start and then press Run All ** ${line.separator}" />
		<echo message="******************************************************** ${line.separator}" />
		<echo message="******************************************************** ${line.separator}" />
		<echo message="******************************************************** ${line.separator}" />
		<jacoco:coverage destfile="test2.exec">
			<java classname="gr.aueb.jade.test.TestMainNIO" failonerror="true" fork="yes">
				<classpath refid="JadeTests.classpath" />
			</java>
		</jacoco:coverage>
	</target>

	<target name="TestMainUDP" description ="Integration tests on UDPNodeMonitoringService (1 test). Press Ctrl^C after test execution.">
		<jacoco:coverage destfile="test3.exec">
			<java classname="gr.aueb.jade.test.TestMainUDP" failonerror="true" fork="yes">
				<classpath refid="JadeTests.classpath" />
			</java>
		</jacoco:coverage>
	</target>

	<target name="coverage_report" description="Generate the coverage report (report folder). Prior to this task run cleanall, build, test, TestMain, TestMainNIO, TestMainUDP">
		<jacoco:merge destfile="merged.exec">
			<fileset dir="." includes="*.exec" />
		</jacoco:merge>
		<jacoco:report>
			<executiondata>
				<file file="merged.exec" />
			</executiondata>
			<structure name="Jade test suite Coverage">
				<group name="Test suite">
					<classfiles>
						<fileset dir="target/classes" />
					</classfiles>
					<sourcefiles encoding="UTF-8">
						<fileset dir="src" />
					</sourcefiles>
				</group>

				<group name="Jade 4.4.0 Coverage">
					<classfiles>
						<fileset dir="jade-4.4.0/classes" />
					</classfiles>
					<sourcefiles encoding="UTF-8">
						<fileset dir="jade-4.4.0/src" />
					</sourcefiles>
				</group>

			</structure>
			<html destdir="report" />
		</jacoco:report>
	</target>


	<target name="junitreport">
		<junitreport todir="${junit.output.dir}">
			<fileset dir="${junit.output.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${junit.output.dir}" />
		</junitreport>
	</target>
</project>
